// <auto-generated />
using System;
using BookingSystem.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace booking_system.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20250718095040_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingSystem.Models.Admin", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BookingSystem.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BookingSystem.Models.Customer", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookingSystem.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatorEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Ticketcount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorEmail");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BookingSystem.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEmail");

                    b.HasIndex("EventId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BookingSystem.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WalletCustomerEmail")
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.HasIndex("WalletCustomerEmail");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookingSystem.Models.Wallet", b =>
                {
                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("balance")
                        .HasColumnType("integer");

                    b.HasKey("CustomerEmail");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("BookingSystem.Models.Admin", b =>
                {
                    b.HasOne("BookingSystem.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("BookingSystem.Models.Admin", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.Customer", b =>
                {
                    b.HasOne("BookingSystem.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("BookingSystem.Models.Customer", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.Event", b =>
                {
                    b.HasOne("BookingSystem.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.Models.Admin", "CreatedBy")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatorEmail")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("BookingSystem.Models.Ticket", b =>
                {
                    b.HasOne("BookingSystem.Models.Customer", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.User", b =>
                {
                    b.HasOne("BookingSystem.Models.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletCustomerEmail");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BookingSystem.Models.Wallet", b =>
                {
                    b.HasOne("BookingSystem.Models.Customer", "Customer")
                        .WithOne("Wallet")
                        .HasForeignKey("BookingSystem.Models.Wallet", "CustomerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookingSystem.Models.Admin", b =>
                {
                    b.Navigation("CreatedEvents");
                });

            modelBuilder.Entity("BookingSystem.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("BookingSystem.Models.Customer", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BookingSystem.Models.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BookingSystem.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
