using VehicleServiceAPI.Interfaces;
using VehicleServiceAPI.Models;
using VehicleServiceAPI.Models.DTOs;
using VehicleServiceAPI.Repositories;

namespace VehicleServiceAPI.Services
{
    public class ImageService : IImageService
    {
        private readonly ImageRepository _imageRepository;
        private readonly BookingRepository _bookingRepository;
        private readonly VehicleRepository _vehicleRepository;
        private readonly string _uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");

        public ImageService(ImageRepository imageRepository, BookingRepository bookingRepository, VehicleRepository vehicleRepository)
        {
            _imageRepository = imageRepository;
            _bookingRepository = bookingRepository;
            _vehicleRepository = vehicleRepository;

            if (!Directory.Exists(_uploadsFolder))
            {
                Directory.CreateDirectory(_uploadsFolder);
            }
        }

        /// <summary>
        /// Retrieves an image by its ID and maps it to an ImageDTO.
        /// </summary>
        public async Task<ImageDTO> GetImageByIdAsync(int id)
        {
            var image = await _imageRepository.GetByIdAsync(id);
            return MapImageToDto(image);
        }

        /// <summary>
        /// Retrieves all images as a collection of ImageDTO.
        /// </summary>
        public async Task<IEnumerable<ImageDTO>> GetAllImagesAsync()
        {
            var images = await _imageRepository.GetAllAsync();
            return images.Select(MapImageToDto);
        }

        /// <summary>
        /// Creates a new image record.
        /// The file is saved automatically and its file path is generated by the service.
        /// </summary>
        public async Task<ImageDTO> CreateImageAsync(CreateImageDTO request)
        {
            var booking = await _bookingRepository.GetByIdAsync(request.BookingId);
            var vehicle = await _vehicleRepository.GetByIdAsync(request.VehicleID);
            var imageEntity = new Image
            {
                Base64Data = request.Base64Data,
                BookingId = request.BookingId,
                VehicleId = request.VehicleID,
                Booking = booking,
                Vehicle = vehicle
            };

            var createdImage = await _imageRepository.AddAsync(imageEntity);
            return MapImageToDto(createdImage);
        }

        /// <summary>
        /// Updates an existing image.
        /// If a new file is provided, it will be saved and the file path updated.
        /// </summary>
        public async Task<ImageDTO> UpdateImageAsync(int id, UpdateImageDTO request)
        {
            var image = await _imageRepository.GetByIdAsync(id);
            if (image == null)
            {
                throw new InvalidOperationException("Image not found.");
            }

            image.Base64Data = request.Base64Data;
            image.BookingId = request.BookingId;
            image.VehicleId = request.VehicleID;

            var updatedImage = await _imageRepository.UpdateAsync(image);
            return MapImageToDto(updatedImage);
        }

        /// <summary>
        /// Soft-deletes an image by its ID.
        /// </summary>
        public async Task<bool> DeleteImageAsync(int id)
        {
            Console.Write(id);
            return await _imageRepository.DeleteAsync(id);
        }

        /// <summary>
        /// Retrieves all images associated with a specific booking.
        /// </summary>
        public async Task<IEnumerable<ImageDTO>> GetImagesByBookingIdAsync(int bookingId)
        {
            var images = await _imageRepository.GetImagesByBookingIdAsync(bookingId);
            return images.Select(MapImageToDto);
        }

        /// <summary>
        /// Retrieves all images associated with a specific vehicle.
        /// </summary>
        public async Task<IEnumerable<ImageDTO>> GetImagesByVehicleIdAsync(int vehicleId)
        {
            var images = await _imageRepository.GetImagesByVehicleIdAsync(vehicleId);
            return images.Select(MapImageToDto);
        }

        #region Mapping Methods

        // Maps an Image domain model to an ImageDTO.
        // Note: Since the DTO requires an IFormFile for property 'File', which is used for uploads,
        // we leave it null in the DTO output.
        private ImageDTO MapImageToDto(Image image)
        {
            return new ImageDTO
            {
                Id = image.Id,
                BookingId = image.BookingId,
                VehicleId = image.VehicleId,
                RegistrationNumber = image.Vehicle?.RegistrationNumber ?? "Unknown",
                Base64Data = image.Base64Data
            };
        }
        #endregion

        /// <summary>
        /// Saves the uploaded file to disk and returns its relative file path.
        /// </summary>
        private async Task<string> SaveFileAsync(IFormFile file)
        {
            // Generate a unique file name using a GUID.
            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.FileName)}";
            var fullPath = Path.Combine(_uploadsFolder, fileName);

            using (var stream = new FileStream(fullPath, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }

            // Return the file path relative to wwwroot (e.g., "uploads/uniqueFileName.jpg").
            return Path.Combine("uploads", fileName).Replace("\\", "/");
        }
    }
}
